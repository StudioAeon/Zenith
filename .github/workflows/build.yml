name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_type: Debug
            compiler: msvc
          - os: windows-latest
            build_type: Release
            compiler: msvc
          - os: ubuntu-latest
            build_type: Debug
            compiler: gcc
          - os: ubuntu-latest
            build_type: Release
            compiler: gcc
          - os: ubuntu-latest
            build_type: Debug
            compiler: clang
          - os: ubuntu-latest
            build_type: Release
            compiler: clang

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: build/_deps
          key: ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-deps-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}-deps-

      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-13 \
            g++-13 \
            clang-18 \
            llvm-18 \
            ninja-build \
            pkg-config \
            xorg-dev \
            libx11-dev \
            libgtk-3-dev \
            libvulkan-dev \
            vulkan-tools \
            vulkan-utility-libraries-dev \
            spirv-tools

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DZENITH_TESTS=ON \
            ${{ matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang' && '-DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 -GNinja' || '' }} \
            ${{ matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc' && '-DCMAKE_C_COMPILER=gcc-13 -DCMAKE_CXX_COMPILER=g++-13 -GNinja' || '' }}

      - name: Build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build --config ${{ matrix.build_type }} -j $(nproc)

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake --build build --config ${{ matrix.build_type }} -j $env:NUMBER_OF_PROCESSORS

      - name: Test
        working-directory: build
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

      - name: Upload artifacts (Release builds)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: zenith-engine-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: |
            build/bin/
            build/lib/
          retention-days: 7
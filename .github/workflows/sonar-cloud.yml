name: SonarCloud
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  check-token:
    runs-on: ubuntu-latest
    outputs:
      has-token: ${{ steps.check.outputs.defined }}
    steps:
      - id: check
        if: ${{ env.SONAR_TOKEN != '' }}
        run: echo "defined=true" >> $GITHUB_OUTPUT
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  scan:
    needs: [ check-token ]
    if: needs.check-token.outputs.has-token == 'true'
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      CLANG_VERSION: 18
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-${{ env.CLANG_VERSION }} \
            llvm-${{ env.CLANG_VERSION }} \
            ninja-build \
            pkg-config \
            xorg-dev \
            libx11-dev \
            libgtk-3-dev \
            libvulkan-dev \
            vulkan-tools \
            vulkan-utility-libraries-dev \
            spirv-tools

      - name: Install build wrapper
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v5.0.0

      - name: Configure
        run: |
          rm -rf build
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_COMPILER=clang-${{ env.CLANG_VERSION }} \
            -DCMAKE_CXX_COMPILER=clang++-${{ env.CLANG_VERSION }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DZENITH_TESTS=ON \
            -DZENITH_TRACK_MEMORY=OFF \
            -DZENITH_ENABLE_COVERAGE=ON \
            -G Ninja

      - name: Build
        run: |
          build-wrapper-linux-x86-64 \
            --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} \
            cmake --build build --clean-first -j $(nproc)

      - name: Verify
        run: |
          FILE=build/Engine/libZenith.a
          [ -f "$FILE" ] || { echo "libZenith.a not found!"; exit 1; }
          file "$FILE"
          ar t "$FILE" > /dev/null || { echo "libZenith.a corrupted"; exit 1; }

      - name: Test & Coverage
        working-directory: build
        run: |
          export LLVM_PROFILE_FILE="coverage-%p.profraw"
          ./Tests/ZenithTests || true
          llvm-profdata-${{ env.CLANG_VERSION }} merge -sparse coverage-*.profraw -o coverage.profdata
          llvm-cov-${{ env.CLANG_VERSION }} export ./Tests/ZenithTests \
            -instr-profile=coverage.profdata \
            -format=lcov \
            -ignore-filename-regex="ThirdParty/.*|Tests/.*" \
            > coverage.info

      - name: Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json"
            --define sonar.cfamily.llvm-cov.reportPath=build/coverage.info
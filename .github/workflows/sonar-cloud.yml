name: SonarCloud Analysis
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-secret:
    runs-on: ubuntu-latest
    outputs:
      sonar-token: ${{ steps.sonar-token.outputs.defined }}
    steps:
      - id: sonar-token
        if: ${{ env.SONAR_TOKEN != '' }}
        run: echo "defined=true" >> $GITHUB_OUTPUT
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build
    needs: [check-secret]
    if: needs.check-secret.outputs.sonar-token == 'true'
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      CLANG_VERSION: 18
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-${{ env.CLANG_VERSION }} \
            llvm-${{ env.CLANG_VERSION }} \
            ninja-build \
            pkg-config \
            xorg-dev \
            libx11-dev \
            libgtk-3-dev \
            libvulkan-dev \
            vulkan-tools \
            vulkan-utility-libraries-dev \
            spirv-tools

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=clang++-${{ env.CLANG_VERSION }} \
            -DCMAKE_C_COMPILER=clang-${{ env.CLANG_VERSION }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DZENITH_TESTS=ON \
            -DZENITH_TRACK_MEMORY=OFF \
            -DZENITH_ENABLE_COVERAGE=ON \
            -G Ninja

      - name: Run build-wrapper (debugging)
        run: |
          build-wrapper-linux-x86-64 \
            --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} \
            cmake --build build --target ZenithTests -j $(nproc)

      - name: Run tests and generate coverage
        working-directory: ${{ github.workspace }}/build
        run: |
          export LLVM_PROFILE_FILE="coverage-%p.profraw"

          if cmake --build . --target test-xml -j $(nproc) 2>/dev/null; then
            echo "XML test target ran successfully"
          else
            echo "test-xml target not found, running tests normally"
            ctest --output-on-failure -j $(nproc) || true
          fi

          ./Tests/ZenithTests || true

          llvm-profdata-${{ env.CLANG_VERSION }} merge -sparse coverage-*.profraw -o coverage.profdata
          llvm-cov-${{ env.CLANG_VERSION }} show ./Tests/ZenithTests \
            -instr-profile=coverage.profdata \
            -format=text \
            -ignore-filename-regex="ThirdParty/.*|Tests/.*" \
            > coverage.txt

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner